from Global import *
from Filter import FilterClassification
from typing import Dict
import subprocess
import os
import pickle

class FileSave:
    """
    A utility class for generating LaTeX reports.
    """
    def __init__(self, outputDirectory="Runs"):
        self.outputDirectory = outputDirectory
        os.makedirs(outputDirectory, exist_ok=True)

        self.header = r"""
        \documentclass{article}
        \usepackage{amsmath}
        \usepackage{geometry}
        \geometry{landscape, a4paper, margin=1in}  % Adjust paper size and margins
        \begin{document}
        """
        self.texFiles: List[str] = []
    
        self.footer = r"\end{document}"

    # Saving the object
    def export(self, object, file: str) -> None:
        """Exports the current object to a file using pickle."""
        file = f"{self.outputDirectory}/{file}_object"
        try:
            with open(file, 'wb') as f:
                pickle.dump(object, f)
            print(f"Object exported to {file}")
        except (IOError, pickle.PickleError) as e:
            print(f"Failed to export object to {file}: {e}")

    def import_from(self, file: str):
        """Imports an object from a file."""
        file = f"{self.outputDirectory}/{file}_object"
        try:
            with open(file, 'rb') as f:
                obj = pickle.load(f)
            print(f"Object imported from {file}")
            return obj
        except (IOError, pickle.PickleError) as e:
            print(f"Failed to import object from {file}: {e}")
            return None

    # Creating LaTeX Reports
    def compile(self):
        print("\n=== Compiling the reports to PDF ===")
        for fileName in self.texFiles:
            print(f"----** compiling {fileName} **----")
            self.compileToPDF(fileName)
        print("=== Compiling DONE ===\n")

    @staticmethod
    def compileToPDF(latex_filepath):
        # Get the directory and filename without the extension
        directory, filename = os.path.split(latex_filepath)
        basename, _ = os.path.splitext(filename)

        # Save the current working directory
        original_directory = os.getcwd()

        # Ensure the directory exists before trying to change into it
        if directory and not os.path.exists(directory):
            os.makedirs(directory)  # Create the directory if it doesn't exist

        # Change to the directory of the LaTeX file
        if directory:
            os.chdir(directory)

        try:
            # Compile the LaTeX file into a PDF
            subprocess.run(["pdflatex", "-interaction=nonstopmode", filename], check=True)
            print(f"PDF generated: {os.path.join(directory, basename + '.pdf')}")
        except subprocess.CalledProcessError as e:
            print(f"Error during LaTeX compilation: {e}")
        finally:
            # Optionally clean up auxiliary files generated during compilation
            aux_files = [basename + ext for ext in [".aux", ".log", ".out"]]
            for aux_file in aux_files:
                if os.path.exists(aux_file):
                    os.remove(aux_file)

            # Change back to the original directory after the LaTeX compilation
            os.chdir(original_directory)

    def createSubFolder(self, filename, subFolder, fileType=".tex"):
        # LaTeX filename
        targetFolder = self.outputDirectory
        if subFolder!= "NONE":
            targetFolder += f"/{subFolder}"
            os.makedirs(targetFolder, exist_ok=True)

        return os.path.join(targetFolder, filename + fileType)
    
    def generateLaTeXSummary(
        self,
        baseHs: sympy.Basic,
        filterClusters: Dict[str, List[FilterClassification]],
        output_filename="Report",
        newpage=False,
        subFolder="NONE"
    ):
        output_filename = self.createSubFolder(output_filename, subFolder)

        # LaTeX header and document setup
        latex_content = self.header
        latex_content += r"""
                        \title{Filter Summary Report: """ + f"{subFolder.replace('_', ',')}" + r"""}
                        \author{Generated by MacAnalog-Symbolix}
                        \maketitle

                        % Table of contents
                        \tableofcontents
                        \newpage
                        """
        
        latex_content += f"\\section{{Examined $H(z)$ for {subFolder.replace('_', ' ')}: ${str(latex(baseHs))}$ }}\\ \n"  # Use fType as the section name
        latex_content += f"\\textbf{{\[H(z) = {str(latex(baseHs))}\] }}\\ \n"  # Use fType as the section name

        # Iterate over the filter clusters
        for fType, filters in filterClusters.items():
            latex_content += f"\\section{{{fType}}}\\ \n"  # Use fType as the section name
            
            # Iterate over each filter classification in the current cluster
            for i, _filter in enumerate(filters, 1):

                latex_content += f"\\subsection{{{_filter.fType}-{i} $Z(s) = {str(latex(_filter.zCombo))}$ }} \\ \n"
                
                # Transfer function
                latex_content += f"\\textbf{{\[H(s) = {str(latex(_filter.transferFunc))}\] }} \\ \n"
                
                # Parameters
                if _filter.parameters:
                    latex_content += "\\textbf{Parameters:}\\\\ \n\n"
                    for param, value in _filter.parameters.items():
                        latex_content += f"{param.replace('_', '-')}: ${str(latex(value))}$\\ \n\n"
                    latex_content += "\\ \n\n"
                
                if newpage:
                    latex_content += "\\newpage\n"  # Optional new page after each filter

        # LaTeX footer
        latex_content += self.footer

        # Saving the LaTeX content to a .tex file
        with open(output_filename, "w") as tex_file:
            tex_file.write(latex_content)

        print(f"LaTeX report generated and saved to: {output_filename}")
        self.texFiles.append(output_filename)

    def generateLaTeXReport(self, filter_classifications: List[FilterClassification], output_filename="Report", newpage=False, subFolder="NONE"):

        output_filename = self.createSubFolder(output_filename, subFolder)

        with open(output_filename, "w") as latex_file:
            latex_file.write(self.header)
            latex_file.write(f"\\section*{{Experiment: {subFolder.replace('_', ',')}}}\n")

            for i, classification in enumerate(filter_classifications, 1):
                latex_file.write(f"\\subsection*{{Filter {i}}}\n")
                if classification.valid:
                    latex_file.write(f"\\textbf{{Filter Type:}} {classification.fType} \\\\ \n")

                    latex_file.write(f"\\textbf{{$Z(s)$:}} ${latex(classification.zCombo)}$ \\\\ \n")
                    # Transfer function
                    latex_file.write(f"\\textbf{{$H(s)$:}} ${latex(classification.transferFunc)}$ \\\\ \n")
                    
                    # Ensure parameters are written in math mode
                    latex_file.write(f"\\textbf{{Q:}} ${latex(classification.parameters['Q'])}$ \\\\ \n")
                    latex_file.write(f"\\textbf{{$\\omega_0$:}} ${latex(classification.parameters['wo'])}$ \\\\ \n")
                    latex_file.write(f"\\textbf{{Bandwidth:}} ${latex(classification.parameters['bandwidth'])}$ \\\\ \n")

                    if (classification.fType == "GE"):
                        latex_file.write(f"\\textbf{{Qz:}} ${latex(classification.parameters['Qz'])}$ \\\\ \n")

                else:
                    latex_file.write("Invalid filter \\\\ \n")
                    latex_file.write(f"\\textbf{{$Z(s)$:}} ${latex(classification.zCombo)}$ \\\\ \n")
                    latex_file.write(f"\\textbf{{$H(s)$:}} ${latex(classification.transferFunc)}$ \\\\ \n")

                # Add a page break if newpage is requested
                if newpage:
                    latex_file.write("\\newpage\n")

            latex_file.write(self.footer)
        print(f"LaTeX report saved to: {output_filename}")
        self.texFiles.append(output_filename)
