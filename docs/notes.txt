
----------------------------------------------------------------------------
The recommended structure of a Python project:
project_name/
│
├── project_name/           # Main package directory
│   ├── __init__.py         # Makes this a package
│   ├── module1.py          # Your main modules
│   ├── module2.py
│   ├── utils/              # Utility functions (optional)
│   │   ├── __init__.py
│   │   ├── helper1.py
│   │   └── helper2.py
│   └── config.py           # Configuration variables (optional)
│
├── tests/                  # Testing directory
│   ├── __init__.py
│   ├── test_module1.py
│   └── test_module2.py
│
├── docs/                   # Documentation (optional)
│   ├── index.md            # Main documentation file
│   └── ...
│
├── examples/               # Example scripts for using your project (optional)
│   └── example_script.py
│
├── scripts/                # Standalone scripts (optional)
│   └── data_processing.py
│
├── .gitignore              # Git ignore file
├── README.md               # Project overview and instructions
├── LICENSE                 # Licensing information
├── requirements.txt        # Python dependencies
├── setup.py                # For packaging and installation (if needed)
├── pyproject.toml          # Alternative to setup.py (modern packaging)
└── tox.ini                 # Configuration for tox testing (optional)
----------------------------------------------------------------------------



# # OLD CODE
# # Define possible impedances

# R1, R2, R3, R4, R5, RL, Rs      = symbols('R1 R2 R3 R4 R5 R_L R_s')
# C1, C2, C3, C4, C5, CL          = symbols('C1 C2 C3 C4 C5 C_L')
# L1, L2, L3, L4, L5, LL          = symbols('L1 L2 L3 L4 L5 L_L')

# Z1 , Z2 , Z3 , Z4 , Z5 , ZL, Zs = symbols('Z1 Z2 Z3 Z4 Z5 Z_L Z_s')
# impedancesToDisconnect = [Z1 , Z2 , Z3 , Z4 , Z5, ZL] # for the CG case

# Zz1 =[  R1,                                            # R
#         s*L1,                                          # L
#         1/(s*C1),                                      # C
#         R1/(1 + R1*C1*s),                              # R || C
#         R1 + 1/(C1*s),                                 # R + C
#         (s*L1 + 1/(s*C1)),                             # L + C
#         (L1*s)/(1 + L1*C1*s**2),                       # L || C
#         R1 + s*L1 + 1/(s*C1),                          # R + L + C
#         (1/R1 + s*C1+ 1/(s*L1))**-1,                   # R || L || C
#         R1 + (s*L1/(1 + L1*C1*s**2)),                  # R + (L || C)
#         R1*(s*L1 + 1/(s*C1))/(R1 + (s*L1 + 1/(s*C1)))  # R || (L + C)
#         ]
# Zz2 = [ R2,                                            # R
#         1/(s*C2),                                      # C
#         R2/(1 + R2*C2*s),                              # R || C
#         R2 + 1/(C2*s),                                 # R + C
#         s*L2 + 1/(s*C2),                               # L + C
#         R2 + s*L2 + 1/(s*C2),                          # R + L + C
#         R2 + (s*L2/(1 + L2*C2*s**2)),                  # R + (L || C)
#         R2*(s*L2 + 1/(s*C2))/(R2 + (s*L2 + 1/(s*C2)))  # R2 || (L2 + C2)
#         ]

# Zz3 = [ R3,                                            # R
#         1/(s*C3),                                      # C
#         R3/(1 + R3*C3*s),                              # R || C
#         R3 + 1/(C3*s),                                 # R + C
#         (s*L3 + 1/(s*C3)),                             # L + C
#         (L3*s)/(1 + L3*C3*s**2),                       # L || C
#         R3 + s*L3 + 1/(s*C3),                          # R + L + C
#         (1/R3 + s*C3+ 1/(s*L3))**-1,                   # R || L || C
#         R3 + (s*L3/(1 + L3*C3*s**2)),                  # R + (L || C)
#         R3*(s*L3 + 1/(s*C3))/(R3 + (s*L3 + 1/(s*C3)))  # R || (L + C)
#         ]


# Zz4 = [ R4,                                            # R
#         1/(s*C4),                                      # C
#         R4/(1 + R4*C4*s),                              # R || C
#         R4 + 1/(C4*s),                                 # R + C
#         (s*L4 + 1/(s*C4)),                             # L + C
#         (L4*s)/(1 + L4*C4*s**2),                       # L || C
#         R4 + s*L4 + 1/(s*C4),                          # R + L + C
#         (1/R4 + s*C4+ 1/(s*L4))**-1,                   # R || L || C
#         R4 + (s*L4/(1 + L4*C4*s**2)),                  # R + (L || C)
#         R4*(s*L4 + 1/(s*C4))/(R4 + (s*L4 + 1/(s*C4)))  # R || (L + C)
#         ]

# Zz5 = [ R5,                                            # R
#         1/(s*C5),                                      # C
#         R5/(1 + R5*C5*s),                              # R || C
#         R5 + 1/(C5*s),                                 # R + C
#         (s*L5 + 1/(s*C5)),                             # L + C
#         (L5*s)/(1 + L5*C5*s**2),                       # L || C
#         R5 + s*L5 + 1/(s*C5),                          # R + L + C
#         (1/R5 + s*C5+ 1/(s*L5))**-1,                   # R || L || C
#         R5 + (s*L5/(1 + L5*C5*s**2)),                  # R + (L || C)
#         R5*(s*L5 + 1/(s*C5))/(R5 + (s*L5 + 1/(s*C5)))  # R || (L + C)
#         ]

# ZzL = [ RL,                                            # R
#         1/(s*CL),                                      # C
#         RL/(1 + RL*CL*s),                              # R || C
#         RL + 1/(CL*s),                                 # R + C
#         (s*LL + 1/(s*CL)),                             # L + C
#         (LL*s)/(1 + LL*CL*s**2),                       # L || C
#         RL + s*LL + 1/(s*CL),                          # R + L + C
#         (1/RL + s*CL+ 1/(s*LL))**-1,                   # R || L || C
#         RL + (s*LL/(1 + LL*CL*s**2)),                  # R + (L || C)
#         RL*(s*LL + 1/(s*CL))/(RL + (s*LL + 1/(s*CL)))  # R || (L + C)
#     ]